// <auto-generated />
using System;
using L.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace L.Migrations
{
    [DbContext(typeof(ControlboxdbContext))]
    [Migration("20250515165942_AddPortadaUrlColumn")]
    partial class AddPortadaUrlColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("L.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("CategoriaID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoriaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Nombre" }, "Nombre")
                        .IsUnique();

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("L.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("L.Models.Libro", b =>
                {
                    b.Property<int>("LibroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("LibroID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LibroId"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("CategoriaID");

                    b.Property<DateOnly?>("FechaPublicacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Resumen")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("LibroId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoriaId" }, "CategoriaID");

                    b.HasIndex(new[] { "Titulo", "Autor" }, "idx_titulo_autor");

                    b.ToTable("libros", (string)null);
                });

            modelBuilder.Entity("L.Models.Reseña", b =>
                {
                    b.Property<int>("ReseñaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ReseñaID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReseñaId"));

                    b.Property<sbyte>("Calificacion")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaReseña")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("LibroId")
                        .HasColumnType("int(11)")
                        .HasColumnName("LibroID");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int(11)")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ReseñaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UsuarioId" }, "UsuarioID");

                    b.HasIndex(new[] { "LibroId", "FechaReseña" }, "idx_libro_fecha");

                    b.ToTable("reseñas", (string)null);
                });

            modelBuilder.Entity("L.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("UsuarioID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UsuarioId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Correo" }, "Correo")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("L.Models.Libro", b =>
                {
                    b.HasOne("L.Models.Categoria", "Categoria")
                        .WithMany("Libros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("libros_ibfk_1");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("L.Models.Reseña", b =>
                {
                    b.HasOne("L.Models.Libro", "Libro")
                        .WithMany("Reseñas")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reseñas_ibfk_2");

                    b.HasOne("L.Models.Usuario", "Usuario")
                        .WithMany("Reseñas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reseñas_ibfk_1");

                    b.Navigation("Libro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("L.Models.Categoria", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("L.Models.Libro", b =>
                {
                    b.Navigation("Reseñas");
                });

            modelBuilder.Entity("L.Models.Usuario", b =>
                {
                    b.Navigation("Reseñas");
                });
#pragma warning restore 612, 618
        }
    }
}
